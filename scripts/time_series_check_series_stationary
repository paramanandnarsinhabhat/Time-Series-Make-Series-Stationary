import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt 

from sklearn.metrics import mean_squared_error
from math import sqrt
from statistics import mean 

import warnings
warnings.filterwarnings("ignore")

train_data = pd.read_csv("/Users/paramanandbhat/Downloads/6.4_Stationarity_for_time_series (1)/data/train_data.csv")
valid_data = pd.read_csv("/Users/paramanandbhat/Downloads/6.4_Stationarity_for_time_series (1)/data/valid_data.csv")

print(train_data.shape)
print(train_data.head())

print(valid_data.shape)
print(valid_data.head())

#Required PreProcessing 
train_data.timestamp = pd.to_datetime(train_data['Date'],format='%Y-%m-%d')
train_data.index = train_data.timestamp

valid_data.timestamp = pd.to_datetime(valid_data['Date'],format='%Y-%m-%d')
valid_data.index = valid_data.timestamp

plt.figure(figsize=(12,8))

plt.plot(train_data.index, train_data['count'], label='train_data')
plt.plot(valid_data.index, valid_data['count'], label='valid')
plt.legend(loc='best')
plt.title("Train and Validation Data")
plt.show()

# dickey fuller, kpss
from statsmodels.tsa.stattools import adfuller, kpss

def adf_test(timeseries):
    
    #Perform Dickey-Fuller test:
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput=pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])

    for key,value in dftest[4].items():
        dfoutput['Critical Value (%s)'%key] = value
    print (dfoutput)


adf_test(train_data['count'])

'''
Results of Dickey-Fuller Test:
Test Statistic                  -0.056611
p-value                          0.953592
#Lags Used                      19.000000
Number of Observations Used    558.000000
Critical Value (1%)             -3.442124
Critical Value (5%)             -2.866734
Critical Value (10%)            -2.569536
dtype: float64

- If the test statistic is less than the critical value, we can reject the null hypothesis (aka the series is stationary). 
- When the test statistic is greater than the critical value, we fail to reject the null hypothesis (which means the series is not stationary). 

**Here test statistic is > than critical. Hence series is not stationary**


'''
def kpss_test(timeseries):
    print ('Results of KPSS Test:')
    kpsstest = kpss(timeseries, regression='c')
    kpss_output = pd.Series(kpsstest[0:3], index=['Test Statistic','p-value','Lags Used'])
    for key,value in kpsstest[3].items():
        kpss_output['Critical Value (%s)'%key] = value
    print (kpss_output)

kpss_test(train_data['count'])

'''
Test Statistic            3.528422
p-value                   0.010000
Lags Used                15.000000
Critical Value (10%)      0.347000
Critical Value (5%)       0.463000
Critical Value (2.5%)     0.574000
Critical Value (1%)       0.739000
dtype: float64

- If the test statistic is greater than the critical value, we reject the null hypothesis (concluding series is not stationary).

- If the test statistic is less than the critical value, if fail to reject the null hypothesis (series is trend stationary).  

**Here test statistic is > than critical. Hence series is not stationary**

'''




